Introduct to Comparison

In Go numbers can be compared using the following relational and equality operators:
    - equal : ==
    - not equal : !=
    - less : <
    - less or equal : <=
    - greater : >
    - greater or equal : >=

The result of the comparison is always a boolean value, so either "true" or "false".

The comparison operators above can also be used to compare strings. In that case a lexicographical (dictionary) order is applied. 
For example: "apple" > "banana" // false
             "apple" < "banana" // true

If Statement

Conditionals in Go are similar to conditionals in other languages. 
The underlying type of any conditional operation is the bool type, which can have the value of true or false. 
Conditionals are often used as flow control mechanisms to check for various conditions.

For checking a particular case an if statement can be used, which executes its code if the underlying condition is true like this:
    - sh
    var value string
    if value == "val"{
        return "was val"
    }

In scenarios involving more than one case many if statements can be chained together using the else if and else statements.
    - sh
    num := 7
    if v := 2 * num; v > 10 {
        fmt.Println(v)
    } else {
        fmt.Println(num)
    }
    // Output: 14

Note: any variables created in the initialization statement go out of scope after the end of the if statement.